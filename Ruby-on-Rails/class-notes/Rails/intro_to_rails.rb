Convention over Configuration(CoC)
	Less code to write
		Some code Rails will automatically generate
		Often, there is no need to code


Database Abstraction Layer
	No need to deal with low-level DB details
	No need for SQL
	Important to understand the SQL generated!

	**ORM: Object-Relational Mapping: mapping db to Ruby classes

Agile-friendly, cross-platform, open source

SQLite for database by default
	Self-contained, serverless, zero-config, transactional, 
	relational SQL database engine

	Most widely deployed SQL engine in the world

MVC: Model View Controller
	1979, software pattern
	Model: represents data the app is working with(and maybe business logic)
	View: visual representation of data(html, JSON, XML...)
	Controller: interaction between model and view

	MVC cycle:
		1. Request sent
		2. Controller <-> model
		3. Controller invokes view
		4. View render data

Summary
	Rapid prototyping
	"Think less, do more"



### Creating your first application
1. rails new appname(my_first_app) #first command

Version control your rails app
	Rails automatically generates .gitignore
	cd appname -> git init -> git add . -> git commit -m "aaa" #this is for Heroku

	This is a directory with auto-generated structure and some code
	Rails also provides built-in web server

2. Open another terminal window, go into my_first_app, run rails server (or rails s)


Directory structure convention
	App: controllers, views, models (and helpers)
	Configuration files: which DB?
	DB: files related to your db and migration "scripts"
	public: static files (like HTML)
		Server looks into public directory before looking anywhere else
		If we want to add completely static webpage to app,
			we can add it to public directory
	Gemdile: dependencies managed by Bundler

If all your pages are going to be static, don't use rails  '

<Summary>
Rails new creates new app
Rails s runs the app (needs to be inside generated directory)
Static pages live inside public directory


###Controller and View
Generating a Controller
	Controllers contain actions(Ruby methods) and orchestrate web requests
	Rails can quickly generate controller and 0 or more actions with associated views

	rails generate(g) controller controller_name [action1 action2]
	ex: rails g controller greeter hello

	No DOCTYPE, head, or body

	ERB: looks like HTML file, but has erb extension
		ERB is a templating library that lets you embed Ruby into HTML

		Tag Patterns
			<% ruby code... %> - evaluate ruby code
			<%= ... ruby code ...%> - output evaluated Ruby code

<Summary>
Controllers contain actions(methods)

ERB allows you to either evaluate expression or output one


###Routes

Routes: before the controller can orchestrate where the web request goes,
	the web request needs to get routed to the Controller

	All routes need to be specified (either generated by rails generators or manually)
	in the config/routes.rb file


Rake: Ruby's build language   '
	Rake = Ruby Make
	No XML - written entirely in Ruby

	Rails uses rake to automate app-related tasks
		ex) Database, running tests, etc

	List of rake tasks: 
		rake --tasks

	Zero-in on indiv rake task and what it does with a --describe tag
		rake --describe task_name

	Rake routes: explains your currently defined routes

<Summary>
	Router directs request to right controller
	rake routes lets you see which routes are currently defined

	